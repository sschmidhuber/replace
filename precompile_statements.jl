precompile(Tuple{typeof(Gumbo_jll.__init__)})
precompile(Tuple{typeof(Gumbo_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{ArgParse.var"#@add_arg_table!", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(ArgParse._add_arg_table!), Any, Any})
precompile(Tuple{typeof(Base.gensym)})
precompile(Tuple{typeof(Base.splice!), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.isexpr), Any, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.isexpr), Any, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, GlobalRef})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.something), Nothing, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:by,), Tuple{typeof(Base.first)}}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:pretty,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Main.main)})
precompile(Tuple{Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{ArgParse.var"#ArgParseSettings#5#6", AbstractString, AbstractString, AbstractString, AbstractString, AbstractString, Bool, Bool, Any, Bool, Bool, Bool, Bool, Bool, Function, Bool, Bool, Bool, Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(ArgParse.check_prefix_chars), Any})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{ArgParse.ArgParseTable}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.convert), Type{Function}, typeof(ArgParse.default_handler)})
precompile(Tuple{Type{NamedTuple{(:help, :required), T} where T<:Tuple}, Tuple{String, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :required), Tuple{String, Bool}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:help, :required), Tuple{String, Bool}}})
precompile(Tuple{ArgParse.var"#add_arg_field!##kw", Any, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :required), Tuple{String, Bool}}})
precompile(Tuple{ArgParse.var"##add_arg_field!#23", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(ArgParse.check_name_format), Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :required), Tuple{String, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :required), Tuple{String, Bool}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{ArgParse.var"#24#26", Any})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{ArgParse.ArgConsumerType}})
precompile(Tuple{Type{ArgParse.ArgConsumerType}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(ArgParse.default_action), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(ArgParse.default_action), Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.check_type), Any, Type, AbstractString})
precompile(Tuple{typeof(ArgParse.check_action_is_valid), Symbol})
precompile(Tuple{typeof(ArgParse.check_nargs_and_action), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(ArgParse.is_flag_action), Symbol})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.is_command_action), Symbol})
precompile(Tuple{Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Function}, ArgParse.var"#3#4"})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s4", 1} where var"#s4"<:AbstractString}}, String})
precompile(Tuple{typeof(ArgParse.name_to_fieldnames!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any, Any})
precompile(Tuple{typeof(ArgParse.check_arg_name), AbstractString})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(ArgParse.auto_dest_name), AbstractString, Array{AbstractString, 1}, Array{AbstractString, 1}, Bool})
precompile(Tuple{ArgParse.var"#r#20"{Bool}, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(ArgParse.get_group), AbstractString, ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.is_cmd), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(ArgParse.is_arg), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.warn_extra_opts), Any, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.check_dest_name), AbstractString})
precompile(Tuple{ArgParse.var"#set_if_valid#28"{Array{Symbol, 1}, ArgParse.ArgParseField}, Any, Any})
precompile(Tuple{typeof(ArgParse.auto_metavar), AbstractString, Bool})
precompile(Tuple{typeof(ArgParse.check_metavar), AbstractString})
precompile(Tuple{typeof(ArgParse.is_multi_action), Symbol})
precompile(Tuple{typeof(ArgParse.is_multi_nargs), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(ArgParse.check_default_type), Nothing, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Nothing, Function})
precompile(Tuple{typeof(ArgParse.check_arg_makes_sense), ArgParse.ArgParseSettings, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(ArgParse.check_conflicts_with_commands), ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(ArgParse.check_for_duplicates), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(ArgParse.parse_args), ArgParse.ArgParseSettings})
precompile(Tuple{ArgParse.var"##parse_args#60", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.parse_args), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{ArgParse.var"##parse_args#61", Bool, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#68#70", Array{String, 1}, Base.Colon})
precompile(Tuple{ArgParse.var"#68#70", Any})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Int64})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any})
precompile(Tuple{ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Any})
precompile(Tuple{typeof(ArgParse.check_long_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(ArgParse.check_short_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{Type{ArgParse.ParserState}, Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#62#64", Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#62#64"}})
precompile(Tuple{ArgParse.var"#63#65", Any})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, Nothing})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Type{NamedTuple{(:taskref, :spawn), T} where T<:Tuple}, Tuple{Nothing, Bool}})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#590", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#591#592"{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Any})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(ArgParse.parse_long_opt!), ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseField}, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.is_flag), ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.parse1_flag!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool, AbstractString})
precompile(Tuple{typeof(ArgParse.test_exclusive_groups!), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseSettings, ArgParse.ArgParseField, AbstractString})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{Type{NamedTuple{(:exit_when_done,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{ArgParse.var"#show_help##kw", Any, typeof(ArgParse.show_help), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:exit_when_done,), Tuple{Bool}}})
precompile(Tuple{ArgParse.var"##show_help#48", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.show_help), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:exit_when_done,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:exit_when_done,), Tuple{Bool}}})
precompile(Tuple{ArgParse.var"#show_help##kw", Any, typeof(ArgParse.show_help), IO, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:exit_when_done,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:exit_when_done,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:exit_when_done,), Tuple{Bool}}, Type{NamedTuple{(:exit_when_done,), T} where T<:Tuple}})
precompile(Tuple{ArgParse.var"##show_help#49", Any, typeof(ArgParse.show_help), IO, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.usage_string), ArgParse.ArgParseSettings})
precompile(Tuple{Type{Base.Dict{String, Tuple{Bool, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{typeof(Base.values), Base.Dict{String, Tuple{Bool, Array{String, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{String, Tuple{Bool, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String})
precompile(Tuple{Type{NamedTuple{(:break_long_words, :break_on_hyphens, :subsequent_indent), T} where T<:Tuple}, Tuple{Bool, Bool, Int64}})
precompile(Tuple{TextWrap.var"#wrap##kw", NamedTuple{(:break_long_words, :break_on_hyphens, :subsequent_indent), Tuple{Bool, Bool, Int64}}, typeof(TextWrap.wrap), String})
precompile(Tuple{typeof(Base.replace), String, Pair{Char, Char}})
precompile(Tuple{Type{Base.Dict{AbstractString, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Array{Any, 1}}, Array{Any, 1}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Array{Any, 1}}, String})
precompile(Tuple{typeof(ArgParse.gen_help_text), ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.all), Function, Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base._all), typeof(Base.isempty), Tuple{String, String, String, String}, Base.Colon})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#50#54", Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{AbstractString, 1}, ArgParse.var"#50#54"}})
precompile(Tuple{ArgParse.var"#50#54", Any})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{AbstractString, 1}, ArgParse.var"#50#54"}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#51#55", Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{AbstractString, 1}, ArgParse.var"#51#55"}})
precompile(Tuple{ArgParse.var"#51#55", Any})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{AbstractString, 1}, ArgParse.var"#51#55"}, Int64})
precompile(Tuple{typeof(Base.:(^)), String, Int64})
precompile(Tuple{Base.var"#595#596"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(ArgParse.show_message), IO, AbstractString, Bool})
precompile(Tuple{typeof(ArgParse.print_group), IO, Array{T, 1} where T, AbstractString, Int64, Int64, AbstractString, AbstractString, AbstractString})
precompile(Tuple{Type{NamedTuple{(:break_long_words, :break_on_hyphens, :initial_indent, :subsequent_indent), T} where T<:Tuple}, Tuple{Bool, Bool, String, String}})
precompile(Tuple{TextWrap.var"#wrap##kw", NamedTuple{(:break_long_words, :break_on_hyphens, :initial_indent, :subsequent_indent), Tuple{Bool, Bool, String, String}}, typeof(TextWrap.wrap), String})
precompile(Tuple{typeof(ArgParse.println_unnbsp), IO, Any})
precompile(Tuple{typeof(Base.map), ArgParse.var"#1#2", Tuple{String}})
precompile(Tuple{ArgParse.var"#1#2", Any})
precompile(Tuple{typeof(Base.exit), Int64})
